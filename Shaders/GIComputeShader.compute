#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel Blur
#pragma kernel SpreadColor

//Output
RWTexture3D<float4> ResultUp;
RWTexture3D<float4> ResultDown;
RWTexture3D<float4> ResultLeft;
RWTexture3D<float4> ResultRight;
RWTexture3D<float4> ResultFront;
RWTexture3D<float4> ResultBack;

//Probe Info
StructuredBuffer<float3> ProbePositions;
StructuredBuffer<float3> ProbeColorUp;
StructuredBuffer<float3> ProbeColorDown;
StructuredBuffer<float3> ProbeColorLeft;
StructuredBuffer<float3> ProbeColorRight;
StructuredBuffer<float3> ProbeColorFront;
StructuredBuffer<float3> ProbeColorBack;
StructuredBuffer<float> ProbeMinDist;

//Extra Info
float TexSize;
float4 TexWorldScale;
float4 TexOffset;

float colorSpreadKernel;
float blurKernel;

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Result[id.xy] = GrabPass[id.xy] * float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 1.0);

    float3 worldPos = float3(id.x * TexWorldScale.x, id.y * TexWorldScale.y, id.z * TexWorldScale.z)
     - float3((TexSize/2) * TexWorldScale.x, (TexSize/2) * TexWorldScale.y, (TexSize/2) * TexWorldScale.z) + TexOffset.xyz;

    float totalDistance = 0;
    int i = 0;
    int probeCount = ProbePositions.Length;
    for(i = 0; i < probeCount; i++)
    {
        totalDistance += distance(ProbePositions[i], worldPos);
    }
    ResultUp[id.xyz] = float4(0,0,0,0);
    ResultDown[id.xyz] = float4(0,0,0,0);
    ResultLeft[id.xyz] = float4(0,0,0,0);
    ResultRight[id.xyz] = float4(0,0,0,0);
    ResultFront[id.xyz] = float4(0,0,0,0);
    ResultBack[id.xyz] = float4(0,0,0,0);


    for(i = 0; i < probeCount; i++)
    {
        totalDistance = 10000;
        for(int j = 0; j < probeCount; j++)
        {
            if(ProbePositions[i].x != ProbePositions[j].x ||
             ProbePositions[i].y != ProbePositions[j].y ||
              ProbePositions[i].z != ProbePositions[j].z)
            {
                if(distance(ProbePositions[j], ProbePositions[i]) < totalDistance)
                    totalDistance = distance(ProbePositions[j], ProbePositions[i]);
            }
        }
        totalDistance = max(ProbeMinDist[i], totalDistance);

        if(distance(ProbePositions[i], worldPos) < totalDistance)
        {
            ResultUp[id.xyz] += max(float4(0,0,0,0), float4(ProbeColorUp[i], 1) * (1.0 - (distance(ProbePositions[i], worldPos) / abs(totalDistance))));
            ResultDown[id.xyz] += max(float4(0,0,0,0), float4(ProbeColorDown[i], 1) * (1.0 - (distance(ProbePositions[i], worldPos) / abs(totalDistance))));
            ResultLeft[id.xyz] += max(float4(0,0,0,0), float4(ProbeColorLeft[i], 1) * (1.0 - (distance(ProbePositions[i], worldPos) / abs(totalDistance))));
            ResultRight[id.xyz] += max(float4(0,0,0,0), float4(ProbeColorRight[i], 1) * (1.0 - (distance(ProbePositions[i], worldPos) / abs(totalDistance))));
            ResultFront[id.xyz] += max(float4(0,0,0,0), float4(ProbeColorFront[i], 1) * (1.0 - (distance(ProbePositions[i], worldPos) / abs(totalDistance))));
            ResultBack[id.xyz] += max(float4(0,0,0,0), float4(ProbeColorBack[i], 1) * (1.0 - (distance(ProbePositions[i], worldPos) / abs(totalDistance))));
        }
    }
}

[numthreads(8,8,8)]
void SpreadColor (uint3 id : SV_DispatchThreadID)
{
    float4 upC = ResultUp[id.xyz];
    float4 downC = ResultDown[id.xyz];
    float4 leftC = ResultLeft[id.xyz];
    float4 rightC = ResultRight[id.xyz];
    float4 frontC = ResultFront[id.xyz];
    float4 backC = ResultBack[id.xyz];

    int3 sid = id;

    int blurSize = colorSpreadKernel;

    float strength = 1.0 / (
        (min(sid.x + blurSize, TexSize) - max(sid.x - blurSize, 0)) *
        (min(sid.y + blurSize, TexSize) - max(sid.y - blurSize, 0)) *
        (min(sid.z + blurSize, TexSize) - max(sid.z - blurSize, 0)));

    float4 upStrength = strength * (1 - upC.w);
    float4 downStrength = strength * (1 - downC.w);
    float4 leftStrength = strength * (1 - leftC.w);
    float4 rightStrength = strength * (1 - rightC.w);
    float4 frontStrength = strength * (1 - frontC.w);
    float4 backStrength = strength * (1 - backC.w);

    for(int x = max(sid.x - blurSize, 0); x < min(sid.x + blurSize, TexSize); x++)
    {
        for(int y = max(sid.y - blurSize, 0); y < min(sid.y + blurSize, TexSize); y++)
        {
            for(int z = max(sid.z - blurSize, 0); z < min(sid.z + blurSize, TexSize); z++)
            {
                float3 curPos = float3(x,y,z); 

                upC += ResultUp[curPos] * upStrength;
                downC += ResultDown[curPos] * downStrength;
                leftC += ResultLeft[curPos] * leftStrength;
                rightC += ResultRight[curPos] * rightStrength;
                frontC += ResultFront[curPos] * frontStrength;
                backC += ResultBack[curPos] * backStrength;
            }
        }
    }

    ResultUp[id.xyz] = upC;
    ResultDown[id.xyz] = downC;
    ResultLeft[id.xyz] = leftC;
    ResultRight[id.xyz] = rightC;
    ResultFront[id.xyz] = frontC;
    ResultBack[id.xyz] = backC;
}


[numthreads(8,8,8)]
void Blur (uint3 id : SV_DispatchThreadID)
{
    float4 upC = float4(0,0,0,0);
    float4 downC = float4(0,0,0,0);
    float4 leftC = float4(0,0,0,0);
    float4 rightC = float4(0,0,0,0);
    float4 frontC = float4(0,0,0,0);
    float4 backC = float4(0,0,0,0);

    int3 sid = id;

    int blurSize = blurKernel;

    float strength = 1.0 / (
        (min(sid.x + blurSize, TexSize) - max(sid.x - blurSize, 0)) *
        (min(sid.y + blurSize, TexSize) - max(sid.y - blurSize, 0)) *
        (min(sid.z + blurSize, TexSize) - max(sid.z - blurSize, 0))); 

    for(int x = max(sid.x - blurSize, 0); x < min(sid.x + blurSize, TexSize); x++)
    {
        for(int y = max(sid.y - blurSize, 0); y < min(sid.y + blurSize, TexSize); y++)
        {
            for(int z = max(sid.z - blurSize, 0); z < min(sid.z + blurSize, TexSize); z++)
            {
                float3 curPos = float3(x,y,z); 

                upC += ResultUp[curPos] * strength;
                downC += ResultDown[curPos] * strength;
                leftC += ResultLeft[curPos] * strength;
                rightC += ResultRight[curPos] * strength;
                frontC += ResultFront[curPos] * strength;
                backC += ResultBack[curPos] * strength;
            }
        }
    }

    if(upC.x > 0 || upC.y > 0 || upC.z > 0)
    {
        ResultUp[id.xyz] = float4(upC.xyz, 1);
        ResultDown[id.xyz] = float4(downC.xyz, 1);
        ResultLeft[id.xyz] = float4(leftC.xyz, 1);
        ResultRight[id.xyz] = float4(rightC.xyz, 1);
        ResultFront[id.xyz] = float4(frontC.xyz, 1);
        ResultBack[id.xyz] = float4(backC.xyz, 1);
    }

}

